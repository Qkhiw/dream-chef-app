// frontend/src/App.jsx (р╣Ар╕зр╕нр╕гр╣Мр╕Кр╕▒р╕Щр╣Бр╕вр╕Бр╕Бр╕▓р╕гр╕Чр╕│р╕Зр╕▓р╕Щ)
import { useState, useEffect } from 'react';
import './App.css';

function App() {
  const [ingredients, setIngredients] = useState('');
  const [quantity, setQuantity] = useState('');
  const [style, setStyle] = useState('р╕нр╕▓р╕лр╕▓р╕гр╕кр╕Хр╕гр╕╡р╕Чр╕Яр╕╣р╣Йр╕Фр╣Ар╕вр╕▓р╕зр╕гр╕▓р╕К');
  
  const [isImageLoading, setIsImageLoading] = useState(false);
  const [isRecipeLoading, setIsRecipeLoading] = useState(false);
  const [error, setError] = useState(null);

  const [imageUrl, setImageUrl] = useState('');
  const [recipe, setRecipe] = useState(null);

  // --- р╕Яр╕▒р╕Зр╕Бр╣Мр╕Кр╕▒р╕Щр╕Чр╕╡р╣И 1: р╕кр╕│р╕лр╕гр╕▒р╕Ър╕кр╕гр╣Йр╕▓р╕Зр╕ар╕▓р╕Ю ---
  const handleGenerateImage = async (event) => {
    event.preventDefault();
    if (!ingredients) {
      alert('р╕Бр╕гр╕╕р╕Ур╕▓р╕Бр╕гр╕нр╕Бр╕Вр╣Йр╕нр╕бр╕╣р╕ер╕зр╕▒р╕Хр╕Цр╕╕р╕Фр╕┤р╕Ъ');
      return;
    }
    setRecipe(null); setImageUrl(''); setError(null);
    setIsImageLoading(true);
    try {
      const response = await fetch('/api/generate-image', {
        method: 'POST', headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ ingredients, quantity, style }),
      });
      if (!response.ok) throw new Error((await response.json()).error || 'р╣Др╕бр╣Ир╕кр╕▓р╕бр╕▓р╕гр╕Цр╕кр╕гр╣Йр╕▓р╕Зр╕ар╕▓р╕Юр╣Др╕Фр╣Й');
      const data = await response.json();
      setImageUrl(data.image_url);
    } catch (err) {
      setError(err.message);
    } finally {
      setIsImageLoading(false);
    }
  };

  // --- р╕Яр╕▒р╕Зр╕Бр╣Мр╕Кр╕▒р╕Щр╕Чр╕╡р╣И 2: р╕кр╕│р╕лр╕гр╕▒р╕Ър╕кр╕гр╣Йр╕▓р╕Зр╕кр╕╣р╕Хр╕гр╕нр╕▓р╕лр╕▓р╕г ---
  const handleGenerateRecipe = async () => {
    setIsRecipeLoading(true);
    setError(null);
    try {
      const response = await fetch('/api/generate-recipe', {
        method: 'POST', headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ ingredients, quantity, style }),
      });
      if (!response.ok) throw new Error((await response.json()).instructions || 'р╣Др╕бр╣Ир╕кр╕▓р╕бр╕▓р╕гр╕Цр╕кр╕гр╣Йр╕▓р╕Зр╕кр╕╣р╕Хр╕гр╣Др╕Фр╣Й');
      const data = await response.json();
      setRecipe(data);
    } catch (err) {
      setError(err.message);
    } finally {
      setIsRecipeLoading(false);
    }
  };

  // --- р╕кр╣Ир╕зр╕Щ Save р╣Бр╕ер╕░ Warning (р╣Ар╕лр╕бр╕╖р╕нр╕Щр╣Ар╕Фр╕┤р╕б) ---
  const handleSaveImage = () => { /* р╣Вр╕Др╣Йр╕Фр╣Ар╕Фр╕┤р╕б */ if (!imageUrl) return; const link = document.createElement('a'); link.href = imageUrl; const fileName = recipe?.menu_name ? `${recipe.menu_name}.png` : 'dream-chef-image.png'; link.download = fileName; document.body.appendChild(link); link.click(); document.body.removeChild(link); };
  const handleSaveRecipe = () => { /* р╣Вр╕Др╣Йр╕Фр╣Ар╕Фр╕┤р╕б */ if (!recipe) return; const recipeText = `р╣Ар╕бр╕Щр╕╣: ${recipe.menu_name}\n\nр╕зр╕┤р╕Шр╕╡р╕Чр╕│:\n${recipe.instructions}`; const blob = new Blob([recipeText], { type: 'text/plain;charset=utf-8' }); const url = URL.createObjectURL(blob); const link = document.createElement('a'); link.href = url; link.download = `${recipe.menu_name}.txt`; document.body.appendChild(link); link.click(); document.body.removeChild(link); URL.revokeObjectURL(url); };
  useEffect(() => { const handleBeforeUnload = (event) => { if (imageUrl) { event.preventDefault(); event.returnValue = ''; } }; window.addEventListener('beforeunload', handleBeforeUnload); return () => window.removeEventListener('beforeunload', handleBeforeUnload); }, [imageUrl]);

  return (
    <div className="app-container">
      <div className="main-card">
        {/* ... р╕кр╣Ир╕зр╕Щр╕Яр╕нр╕гр╣Мр╕б ... */}
        <form onSubmit={handleGenerateImage}>
            <h1 className="title">р╕Щр╕▒р╕Бр╕Ыр╕гр╕╕р╕Зр╕Эр╕▒р╕Щ</h1>
            <p className="subtitle">р╕Ър╕нр╕Бр╕зр╕▒р╕Хр╕Цр╕╕р╕Фр╕┤р╕Ъ р╣Бр╕ер╣Йр╕зр╣Гр╕лр╣Й AI р╕Ыр╕гр╕╕р╕Зр╕Эр╕▒р╕Щр╣Гр╕лр╣Йр╕Др╕╕р╕У</p>
            <div className="form-group"><label htmlFor="ingredients-input">р╕зр╕▒р╕Хр╕Цр╕╕р╕Фр╕┤р╕Ър╕Вр╕нр╕Зр╕Др╕╕р╕У:</label><input id="ingredients-input" type="text" value={ingredients} onChange={(e) => setIngredients(e.target.value)} placeholder="р╣Ар╕Кр╣Ир╕Щ р╣Ар╕Щр╕╖р╣Йр╕нр╣Бр╕Бр╕░, р╣Вр╕гр╕кр╣Бр╕бр╕гр╕╡р╣И, р╣Бр╕кр╕Зр╕Ир╕▒р╕Щр╕Чр╕гр╣М..."/></div>
            <div className="form-group"><label htmlFor="quantity-input">р╕Ир╕│р╕Щр╕зр╕Щ/р╕Ыр╕гр╕┤р╕бр╕▓р╕У:</label><input id="quantity-input" type="text" value={quantity} onChange={(e) => setQuantity(e.target.value)} placeholder="р╣Ар╕Кр╣Ир╕Щ 2 р╕Кр╕┤р╣Йр╕Щ, 1 р╕Бр╕┤р╣Вр╕ер╕Бр╕гр╕▒р╕б, 1 р╕Вр╕зр╕Ф..."/></div>
            <div className="form-group"><label htmlFor="style-select">р╣Ар╕ер╕╖р╕нр╕Бр╕кр╣Др╕Хр╕ер╣Мр╕Бр╕▓р╕гр╕Ыр╕гр╕╕р╕З:</label><select id="style-select" value={style} onChange={(e) => setStyle(e.target.value)}><option value="Thai Street Food in Yaowarat at night">р╕нр╕▓р╕лр╕▓р╕гр╕кр╕Хр╕гр╕╡р╕Чр╕Яр╕╣р╣Йр╕Фр╣Ар╕вр╕▓р╕зр╕гр╕▓р╕К</option><option value="Royal Thai Cuisine served in golden plate">р╕нр╕▓р╕лр╕▓р╕гр╕Кр╕▓р╕зр╕зр╕▒р╕Зр╣Ар╕Др╕гр╕╖р╣Ир╕нр╕Зр╕Чр╕нр╕З</option><option value="Spicy Isaan style with sticky rice">р╕нр╕▓р╕лр╕▓р╕гр╕нр╕╡р╕кр╕▓р╕Щр╕гр╕кр╣Бр╕Лр╣Ир╕Ъ</option><option value="Floating market food on a boat">р╕нр╕▓р╕лр╕▓р╕гр╣Гр╕Щр╕Хр╕ер╕▓р╕Фр╕Щр╣Йр╕│</option><option value="Southern Thai food, very spicy and colorful">р╕нр╕▓р╕лр╕▓р╕гр╣Гр╕Хр╣Йр╕гр╕кр╕Ир╕▒р╕Фр╕Ир╣Йр╕▓р╕Щ</option><option value="Modern Thai cuisine, fine dining presentation">р╕нр╕▓р╕лр╕▓р╕гр╣Др╕Чр╕вр╕кр╣Др╕Хр╕ер╣Мр╣Вр╕бр╣Ар╕Фр╕┤р╕гр╣Мр╕Щ</option></select></div>
            <button type="submit" disabled={isImageLoading || isRecipeLoading}>{isImageLoading ? 'р╕Бр╕│р╕ер╕▒р╕Зр╕зр╕▓р╕Фр╕ар╕▓р╕Ю...' : 'р╣Ар╕кр╕Бр╕кр╕гр╕гр╕Ыр╕▒р╣Йр╕Щр╣Бр╕Хр╣Ир╕З!'}</button>
        </form>
      </div>
      <div className="result-section">
        <div className={`cauldron-container ${isImageLoading ? 'loading' : ''}`}>
          {isImageLoading && <div className="loader"></div>}
          {error && !isImageLoading && <div className="error-message">{error}</div>}
          {!imageUrl && !isImageLoading && !error && (<div className="placeholder"><span>ЁЯН▓</span><p>р╕Ьр╕ер╕Зр╕▓р╕Щр╕Вр╕нр╕Зр╕Др╕╕р╕Ур╕Ир╕░р╕Ыр╕гр╕▓р╕Бр╕Пр╕Чр╕╡р╣Ир╕Щр╕╡р╣И</p></div>)}
          {imageUrl && (<img src={imageUrl} alt="Generated food" className="result-image-display" />)}
        </div>
        
        {/* --- р╕Ыр╕╕р╣Ир╕бр╣Бр╕ер╕░р╕кр╣Ир╕зр╕Щр╣Бр╕кр╕Фр╕Зр╕Ьр╕ер╣Гр╕лр╕бр╣И --- */}
        {imageUrl && !recipe && !isRecipeLoading && (
            <button onClick={handleGenerateRecipe} className="generate-recipe-btn">ЁЯУЦ р╕кр╕гр╣Йр╕▓р╕Зр╕кр╕╣р╕Хр╕гр╕нр╕▓р╕лр╕▓р╕гр╕кр╕│р╕лр╕гр╕▒р╕Ър╕ар╕▓р╕Юр╕Щр╕╡р╣Й</button>
        )}
        {isRecipeLoading && <div className="loader-small">р╕Бр╕│р╕ер╕▒р╕Зр╕Др╕┤р╕Фр╕кр╕╣р╕Хр╕г...</div>}
        {recipe && (
          <div className="recipe-card">
            <h2>{recipe.menu_name}</h2>
            <p>{recipe.instructions}</p>
            <div className="save-buttons-container">
              <button onClick={handleSaveImage} className="save-button">ЁЯЦ╝я╕П р╕Ър╕▒р╕Щр╕Чр╕╢р╕Бр╕гр╕╣р╕Ыр╕ар╕▓р╕Ю</button>
              <button onClick={handleSaveRecipe} className="save-button">ЁЯУЭ р╕Ър╕▒р╕Щр╕Чр╕╢р╕Бр╕кр╕╣р╕Хр╕г</button>
            </div>
          </div>
        )}
      </div>
    </div>
  );
}

export default App;